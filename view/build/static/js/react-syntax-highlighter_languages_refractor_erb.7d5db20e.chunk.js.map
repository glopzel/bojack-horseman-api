{"version":3,"sources":["../node_modules/refractor/lang/erb.js","../node_modules/refractor/lang/markup-templating.js","../node_modules/refractor/lang/ruby.js"],"names":["refractorMarkupTemplating","__webpack_require__","refractorRuby","erb","Prism","register","languages","extend","insertBefore","delimiter","pattern","alias","hooks","add","env","buildPlaceholders","tokenizePlaceholders","module","exports","displayName","aliases","markupTemplating","getPlaceholder","language","index","toUpperCase","Object","defineProperties","value","placeholderPattern","replaceFilter","tokenStack","code","replace","match","placeholder","i","length","indexOf","grammar","markup","j","keys","walkTokens","tokens","token","content","k","t","s","before","substring","middle","Token","tokenize","after","replacement","push","apply","splice","concat","ruby","comment","greedy","keyword","interpolation","inside","rest","function","regex","lookbehind","variable","symbol","method-definition","builtin","constant","string","rb"],"mappings":"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","file":"static/js/react-syntax-highlighter_languages_refractor_erb.7d5db20e.chunk.js","sourcesContent":["'use strict';\n\nvar refractorMarkupTemplating = require('./markup-templating.js');\nvar refractorRuby = require('./ruby.js');\nmodule.exports = erb;\nerb.displayName = 'erb';\nerb.aliases = [];\nfunction erb(Prism) {\n  Prism.register(refractorMarkupTemplating);\n  Prism.register(refractorRuby);\n  (function (Prism) {\n    Prism.languages.erb = Prism.languages.extend('ruby', {});\n    Prism.languages.insertBefore('erb', 'comment', {\n      delimiter: {\n        pattern: /^<%=?|%>$/,\n        alias: 'punctuation'\n      }\n    });\n    Prism.hooks.add('before-tokenize', function (env) {\n      var erbPattern = /<%=?(?:[^\\r\\n]|[\\r\\n](?!=begin)|[\\r\\n]=begin\\s[\\s\\S]*?^=end)+?%>/gm;\n      Prism.languages['markup-templating'].buildPlaceholders(env, 'erb', erbPattern);\n    });\n    Prism.hooks.add('after-tokenize', function (env) {\n      Prism.languages['markup-templating'].tokenizePlaceholders(env, 'erb');\n    });\n  })(Prism);\n}","'use strict';\n\nmodule.exports = markupTemplating;\nmarkupTemplating.displayName = 'markupTemplating';\nmarkupTemplating.aliases = [];\nfunction markupTemplating(Prism) {\n  ;\n  (function (Prism) {\n    /**\n     * Returns the placeholder for the given language id and index.\n     *\n     * @param {string} language\n     * @param {string|number} index\n     * @returns {string}\n     */\n    function getPlaceholder(language, index) {\n      return '___' + language.toUpperCase() + index + '___';\n    }\n    Object.defineProperties(Prism.languages['markup-templating'] = {}, {\n      buildPlaceholders: {\n        /**\n         * Tokenize all inline templating expressions matching `placeholderPattern`.\n         *\n         * If `replaceFilter` is provided, only matches of `placeholderPattern` for which `replaceFilter` returns\n         * `true` will be replaced.\n         *\n         * @param {object} env The environment of the `before-tokenize` hook.\n         * @param {string} language The language id.\n         * @param {RegExp} placeholderPattern The matches of this pattern will be replaced by placeholders.\n         * @param {(match: string) => boolean} [replaceFilter]\n         */\n        value: function value(env, language, placeholderPattern, replaceFilter) {\n          if (env.language !== language) {\n            return;\n          }\n          var tokenStack = env.tokenStack = [];\n          env.code = env.code.replace(placeholderPattern, function (match) {\n            if (typeof replaceFilter === 'function' && !replaceFilter(match)) {\n              return match;\n            }\n            var i = tokenStack.length;\n            var placeholder; // Check for existing strings\n            while (env.code.indexOf(placeholder = getPlaceholder(language, i)) !== -1) {\n              ++i;\n            } // Create a sparse array\n            tokenStack[i] = match;\n            return placeholder;\n          }); // Switch the grammar to markup\n          env.grammar = Prism.languages.markup;\n        }\n      },\n      tokenizePlaceholders: {\n        /**\n         * Replace placeholders with proper tokens after tokenizing.\n         *\n         * @param {object} env The environment of the `after-tokenize` hook.\n         * @param {string} language The language id.\n         */\n        value: function value(env, language) {\n          if (env.language !== language || !env.tokenStack) {\n            return;\n          } // Switch the grammar back\n          env.grammar = Prism.languages[language];\n          var j = 0;\n          var keys = Object.keys(env.tokenStack);\n          function walkTokens(tokens) {\n            for (var i = 0; i < tokens.length; i++) {\n              // all placeholders are replaced already\n              if (j >= keys.length) {\n                break;\n              }\n              var token = tokens[i];\n              if (typeof token === 'string' || token.content && typeof token.content === 'string') {\n                var k = keys[j];\n                var t = env.tokenStack[k];\n                var s = typeof token === 'string' ? token : token.content;\n                var placeholder = getPlaceholder(language, k);\n                var index = s.indexOf(placeholder);\n                if (index > -1) {\n                  ++j;\n                  var before = s.substring(0, index);\n                  var middle = new Prism.Token(language, Prism.tokenize(t, env.grammar), 'language-' + language, t);\n                  var after = s.substring(index + placeholder.length);\n                  var replacement = [];\n                  if (before) {\n                    replacement.push.apply(replacement, walkTokens([before]));\n                  }\n                  replacement.push(middle);\n                  if (after) {\n                    replacement.push.apply(replacement, walkTokens([after]));\n                  }\n                  if (typeof token === 'string') {\n                    tokens.splice.apply(tokens, [i, 1].concat(replacement));\n                  } else {\n                    token.content = replacement;\n                  }\n                }\n              } else if (token.content\n              /* && typeof token.content !== 'string' */) {\n                walkTokens(token.content);\n              }\n            }\n            return tokens;\n          }\n          walkTokens(env.tokens);\n        }\n      }\n    });\n  })(Prism);\n}","'use strict';\n\nmodule.exports = ruby;\nruby.displayName = 'ruby';\nruby.aliases = ['rb'];\nfunction ruby(Prism) {\n  /**\n   * Original by Samuel Flores\n   *\n   * Adds the following new token classes:\n   *      constant, builtin, variable, symbol, regex\n   */\n  ;\n  (function (Prism) {\n    Prism.languages.ruby = Prism.languages.extend('clike', {\n      comment: [/#.*/, {\n        pattern: /^=begin\\s[\\s\\S]*?^=end/m,\n        greedy: true\n      }],\n      keyword: /\\b(?:alias|and|BEGIN|begin|break|case|class|def|define_method|defined|do|each|else|elsif|END|end|ensure|false|for|if|in|module|new|next|nil|not|or|protected|private|public|raise|redo|require|rescue|retry|return|self|super|then|throw|true|undef|unless|until|when|while|yield)\\b/\n    });\n    var interpolation = {\n      pattern: /#\\{[^}]+\\}/,\n      inside: {\n        delimiter: {\n          pattern: /^#\\{|\\}$/,\n          alias: 'tag'\n        },\n        rest: Prism.languages.ruby\n      }\n    };\n    delete Prism.languages.ruby.function;\n    Prism.languages.insertBefore('ruby', 'keyword', {\n      regex: [{\n        pattern: /%r([^a-zA-Z0-9\\s{(\\[<])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1[gim]{0,3}/,\n        greedy: true,\n        inside: {\n          interpolation: interpolation\n        }\n      }, {\n        pattern: /%r\\((?:[^()\\\\]|\\\\[\\s\\S])*\\)[gim]{0,3}/,\n        greedy: true,\n        inside: {\n          interpolation: interpolation\n        }\n      }, {\n        // Here we need to specifically allow interpolation\n        pattern: /%r\\{(?:[^#{}\\\\]|#(?:\\{[^}]+\\})?|\\\\[\\s\\S])*\\}[gim]{0,3}/,\n        greedy: true,\n        inside: {\n          interpolation: interpolation\n        }\n      }, {\n        pattern: /%r\\[(?:[^\\[\\]\\\\]|\\\\[\\s\\S])*\\][gim]{0,3}/,\n        greedy: true,\n        inside: {\n          interpolation: interpolation\n        }\n      }, {\n        pattern: /%r<(?:[^<>\\\\]|\\\\[\\s\\S])*>[gim]{0,3}/,\n        greedy: true,\n        inside: {\n          interpolation: interpolation\n        }\n      }, {\n        pattern: /(^|[^/])\\/(?!\\/)(\\[.+?]|\\\\.|[^/\\\\\\r\\n])+\\/[gim]{0,3}(?=\\s*($|[\\r\\n,.;})]))/,\n        lookbehind: true,\n        greedy: true\n      }],\n      variable: /[@$]+[a-zA-Z_]\\w*(?:[?!]|\\b)/,\n      symbol: {\n        pattern: /(^|[^:]):[a-zA-Z_]\\w*(?:[?!]|\\b)/,\n        lookbehind: true\n      },\n      'method-definition': {\n        pattern: /(\\bdef\\s+)[\\w.]+/,\n        lookbehind: true,\n        inside: {\n          function: /\\w+$/,\n          rest: Prism.languages.ruby\n        }\n      }\n    });\n    Prism.languages.insertBefore('ruby', 'number', {\n      builtin: /\\b(?:Array|Bignum|Binding|Class|Continuation|Dir|Exception|FalseClass|File|Stat|Fixnum|Float|Hash|Integer|IO|MatchData|Method|Module|NilClass|Numeric|Object|Proc|Range|Regexp|String|Struct|TMS|Symbol|ThreadGroup|Thread|Time|TrueClass)\\b/,\n      constant: /\\b[A-Z]\\w*(?:[?!]|\\b)/\n    });\n    Prism.languages.ruby.string = [{\n      pattern: /%[qQiIwWxs]?([^a-zA-Z0-9\\s{(\\[<])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1/,\n      greedy: true,\n      inside: {\n        interpolation: interpolation\n      }\n    }, {\n      pattern: /%[qQiIwWxs]?\\((?:[^()\\\\]|\\\\[\\s\\S])*\\)/,\n      greedy: true,\n      inside: {\n        interpolation: interpolation\n      }\n    }, {\n      // Here we need to specifically allow interpolation\n      pattern: /%[qQiIwWxs]?\\{(?:[^#{}\\\\]|#(?:\\{[^}]+\\})?|\\\\[\\s\\S])*\\}/,\n      greedy: true,\n      inside: {\n        interpolation: interpolation\n      }\n    }, {\n      pattern: /%[qQiIwWxs]?\\[(?:[^\\[\\]\\\\]|\\\\[\\s\\S])*\\]/,\n      greedy: true,\n      inside: {\n        interpolation: interpolation\n      }\n    }, {\n      pattern: /%[qQiIwWxs]?<(?:[^<>\\\\]|\\\\[\\s\\S])*>/,\n      greedy: true,\n      inside: {\n        interpolation: interpolation\n      }\n    }, {\n      pattern: /(\"|')(?:#\\{[^}]+\\}|\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n      greedy: true,\n      inside: {\n        interpolation: interpolation\n      }\n    }];\n    Prism.languages.rb = Prism.languages.ruby;\n  })(Prism);\n}"],"sourceRoot":""}