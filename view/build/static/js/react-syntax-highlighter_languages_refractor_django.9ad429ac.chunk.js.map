{"version":3,"sources":["../node_modules/refractor/lang/django.js","../node_modules/refractor/lang/markup-templating.js"],"names":["refractorMarkupTemplating","__webpack_require__","django","Prism","register","languages","comment","tag","pattern","lookbehind","alias","delimiter","string","greedy","filter","test","function","keyword","operator","number","boolean","variable","punctuation","markupTemplating","hooks","add","env","buildPlaceholders","tokenizePlaceholders","jinja2","module","exports","displayName","aliases","getPlaceholder","language","index","toUpperCase","Object","defineProperties","value","placeholderPattern","replaceFilter","tokenStack","code","replace","match","placeholder","i","length","indexOf","grammar","markup","j","keys","walkTokens","tokens","token","content","k","t","s","before","substring","middle","Token","tokenize","after","replacement","push","apply","splice","concat"],"mappings":"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","file":"static/js/react-syntax-highlighter_languages_refractor_django.9ad429ac.chunk.js","sourcesContent":["'use strict';\n\nvar refractorMarkupTemplating = require('./markup-templating.js');\nmodule.exports = django;\ndjango.displayName = 'django';\ndjango.aliases = ['jinja2'];\nfunction django(Prism) {\n  Prism.register(refractorMarkupTemplating)\n  // Django/Jinja2 syntax definition for Prism.js <http://prismjs.com> syntax highlighter.\n  // Mostly it works OK but can paint code incorrectly on complex html/template tag combinations.\n  ;\n  (function (Prism) {\n    Prism.languages.django = {\n      comment: /^{#[\\s\\S]*?#}$/,\n      tag: {\n        pattern: /(^{%[+-]?\\s*)\\w+/,\n        lookbehind: true,\n        alias: 'keyword'\n      },\n      delimiter: {\n        pattern: /^{[{%][+-]?|[+-]?[}%]}$/,\n        alias: 'punctuation'\n      },\n      string: {\n        pattern: /(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n        greedy: true\n      },\n      filter: {\n        pattern: /(\\|)\\w+/,\n        lookbehind: true,\n        alias: 'function'\n      },\n      test: {\n        pattern: /(\\bis\\s+(?:not\\s+)?)(?!not\\b)\\w+/,\n        lookbehind: true,\n        alias: 'function'\n      },\n      function: /\\b[a-z_]\\w+(?=\\s*\\()/i,\n      keyword: /\\b(?:and|as|by|else|for|if|import|in|is|loop|not|or|recursive|with|without)\\b/,\n      operator: /[-+*/%=]=?|!=|\\*\\*?=?|\\/\\/?=?|<[<=>]?|>[=>]?|[&|^~]/,\n      number: /\\b\\d+(?:\\.\\d+)?\\b/,\n      boolean: /[Tt]rue|[Ff]alse|[Nn]one/,\n      variable: /\\b\\w+?\\b/,\n      punctuation: /[{}[\\](),.:;]/\n    };\n    var pattern = /{{[\\s\\S]*?}}|{%[\\s\\S]*?%}|{#[\\s\\S]*?#}/g;\n    var markupTemplating = Prism.languages['markup-templating'];\n    Prism.hooks.add('before-tokenize', function (env) {\n      markupTemplating.buildPlaceholders(env, 'django', pattern);\n    });\n    Prism.hooks.add('after-tokenize', function (env) {\n      markupTemplating.tokenizePlaceholders(env, 'django');\n    }); // Add an Jinja2 alias\n    Prism.languages.jinja2 = Prism.languages.django;\n    Prism.hooks.add('before-tokenize', function (env) {\n      markupTemplating.buildPlaceholders(env, 'jinja2', pattern);\n    });\n    Prism.hooks.add('after-tokenize', function (env) {\n      markupTemplating.tokenizePlaceholders(env, 'jinja2');\n    });\n  })(Prism);\n}","'use strict';\n\nmodule.exports = markupTemplating;\nmarkupTemplating.displayName = 'markupTemplating';\nmarkupTemplating.aliases = [];\nfunction markupTemplating(Prism) {\n  ;\n  (function (Prism) {\n    /**\n     * Returns the placeholder for the given language id and index.\n     *\n     * @param {string} language\n     * @param {string|number} index\n     * @returns {string}\n     */\n    function getPlaceholder(language, index) {\n      return '___' + language.toUpperCase() + index + '___';\n    }\n    Object.defineProperties(Prism.languages['markup-templating'] = {}, {\n      buildPlaceholders: {\n        /**\n         * Tokenize all inline templating expressions matching `placeholderPattern`.\n         *\n         * If `replaceFilter` is provided, only matches of `placeholderPattern` for which `replaceFilter` returns\n         * `true` will be replaced.\n         *\n         * @param {object} env The environment of the `before-tokenize` hook.\n         * @param {string} language The language id.\n         * @param {RegExp} placeholderPattern The matches of this pattern will be replaced by placeholders.\n         * @param {(match: string) => boolean} [replaceFilter]\n         */\n        value: function value(env, language, placeholderPattern, replaceFilter) {\n          if (env.language !== language) {\n            return;\n          }\n          var tokenStack = env.tokenStack = [];\n          env.code = env.code.replace(placeholderPattern, function (match) {\n            if (typeof replaceFilter === 'function' && !replaceFilter(match)) {\n              return match;\n            }\n            var i = tokenStack.length;\n            var placeholder; // Check for existing strings\n            while (env.code.indexOf(placeholder = getPlaceholder(language, i)) !== -1) {\n              ++i;\n            } // Create a sparse array\n            tokenStack[i] = match;\n            return placeholder;\n          }); // Switch the grammar to markup\n          env.grammar = Prism.languages.markup;\n        }\n      },\n      tokenizePlaceholders: {\n        /**\n         * Replace placeholders with proper tokens after tokenizing.\n         *\n         * @param {object} env The environment of the `after-tokenize` hook.\n         * @param {string} language The language id.\n         */\n        value: function value(env, language) {\n          if (env.language !== language || !env.tokenStack) {\n            return;\n          } // Switch the grammar back\n          env.grammar = Prism.languages[language];\n          var j = 0;\n          var keys = Object.keys(env.tokenStack);\n          function walkTokens(tokens) {\n            for (var i = 0; i < tokens.length; i++) {\n              // all placeholders are replaced already\n              if (j >= keys.length) {\n                break;\n              }\n              var token = tokens[i];\n              if (typeof token === 'string' || token.content && typeof token.content === 'string') {\n                var k = keys[j];\n                var t = env.tokenStack[k];\n                var s = typeof token === 'string' ? token : token.content;\n                var placeholder = getPlaceholder(language, k);\n                var index = s.indexOf(placeholder);\n                if (index > -1) {\n                  ++j;\n                  var before = s.substring(0, index);\n                  var middle = new Prism.Token(language, Prism.tokenize(t, env.grammar), 'language-' + language, t);\n                  var after = s.substring(index + placeholder.length);\n                  var replacement = [];\n                  if (before) {\n                    replacement.push.apply(replacement, walkTokens([before]));\n                  }\n                  replacement.push(middle);\n                  if (after) {\n                    replacement.push.apply(replacement, walkTokens([after]));\n                  }\n                  if (typeof token === 'string') {\n                    tokens.splice.apply(tokens, [i, 1].concat(replacement));\n                  } else {\n                    token.content = replacement;\n                  }\n                }\n              } else if (token.content\n              /* && typeof token.content !== 'string' */) {\n                walkTokens(token.content);\n              }\n            }\n            return tokens;\n          }\n          walkTokens(env.tokens);\n        }\n      }\n    });\n  })(Prism);\n}"],"sourceRoot":""}