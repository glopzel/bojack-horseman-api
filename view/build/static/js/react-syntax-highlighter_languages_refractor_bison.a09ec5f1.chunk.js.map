{"version":3,"sources":["../node_modules/refractor/lang/bison.js","../node_modules/refractor/lang/c.js"],"names":["refractorC","__webpack_require__","bison","Prism","register","languages","extend","insertBefore","pattern","inside","c","delimiter","alias","bison-variable","punctuation","rest","comment","string","property","keyword","number","lookbehind","module","exports","displayName","aliases","class-name","operator","macro","directive","constant"],"mappings":"8FAEA,IAAAA,EAAiBC,EAAQ,GAIzB,SAAAC,EAAAC,GACAA,EAAAC,SAAAJ,GACAG,EAAAE,UAAAH,MAAAC,EAAAE,UAAAC,OAAA,QACAH,EAAAE,UAAAE,aAAA,mBACAL,MAAA,CAIAM,QAAA,wBACAC,OAAA,CACAC,EAAA,CAEAF,QAAA,0CACAC,OAAA,CACAE,UAAA,CACAH,QAAA,cACAI,MAAA,eAEAC,iBAAA,CACAL,QAAA,2BACAI,MAAA,WACAH,OAAA,CACAK,YAAA,QAGAC,KAAAZ,EAAAE,UAAAK,IAGAM,QAAAb,EAAAE,UAAAK,EAAAM,QACAC,OAAAd,EAAAE,UAAAK,EAAAO,OACAC,SAAA,WACAC,QAAA,OACAC,OAAA,CACAZ,QAAA,gCACAa,YAAA,GAEAP,YAAA,wBAvCAQ,EAAAC,QAAArB,EACAA,EAAAsB,YAAA,QACAtB,EAAAuB,QAAA,mCCAA,SAAAf,EAAAP,GACAA,EAAAE,UAAAK,EAAAP,EAAAE,UAAAC,OAAA,SACAoB,aAAA,CACAlB,QAAA,4BACAa,YAAA,GAEAF,QAAA,sUACAQ,SAAA,kDACAP,OAAA,0GAEAjB,EAAAE,UAAAE,aAAA,cACAqB,MAAA,CAGApB,QAAA,qDACAa,YAAA,EACAT,MAAA,WACAH,OAAA,CAEAQ,OAAA,CACAT,QAAA,8CACAa,YAAA,GAGAQ,UAAA,CACArB,QAAA,4GACAa,YAAA,EACAT,MAAA,aAKAkB,SAAA,sIAEA3B,EAAAE,UAAAK,EAAA,QArCAY,EAAAC,QAAAb,EACAA,EAAAc,YAAA,IACAd,EAAAe,QAAA","file":"static/js/react-syntax-highlighter_languages_refractor_bison.a09ec5f1.chunk.js","sourcesContent":["'use strict';\n\nvar refractorC = require('./c.js');\nmodule.exports = bison;\nbison.displayName = 'bison';\nbison.aliases = [];\nfunction bison(Prism) {\n  Prism.register(refractorC);\n  Prism.languages.bison = Prism.languages.extend('c', {});\n  Prism.languages.insertBefore('bison', 'comment', {\n    bison: {\n      // This should match all the beginning of the file\n      // including the prologue(s), the bison declarations and\n      // the grammar rules.\n      pattern: /^[\\s\\S]*?%%[\\s\\S]*?%%/,\n      inside: {\n        c: {\n          // Allow for one level of nested braces\n          pattern: /%\\{[\\s\\S]*?%\\}|\\{(?:\\{[^}]*\\}|[^{}])*\\}/,\n          inside: {\n            delimiter: {\n              pattern: /^%?\\{|%?\\}$/,\n              alias: 'punctuation'\n            },\n            'bison-variable': {\n              pattern: /[$@](?:<[^\\s>]+>)?[\\w$]+/,\n              alias: 'variable',\n              inside: {\n                punctuation: /<|>/\n              }\n            },\n            rest: Prism.languages.c\n          }\n        },\n        comment: Prism.languages.c.comment,\n        string: Prism.languages.c.string,\n        property: /\\S+(?=:)/,\n        keyword: /%\\w+/,\n        number: {\n          pattern: /(^|[^@])\\b(?:0x[\\da-f]+|\\d+)/i,\n          lookbehind: true\n        },\n        punctuation: /%[%?]|[|:;\\[\\]<>]/\n      }\n    }\n  });\n}","'use strict';\n\nmodule.exports = c;\nc.displayName = 'c';\nc.aliases = [];\nfunction c(Prism) {\n  Prism.languages.c = Prism.languages.extend('clike', {\n    'class-name': {\n      pattern: /(\\b(?:enum|struct)\\s+)\\w+/,\n      lookbehind: true\n    },\n    keyword: /\\b(?:_Alignas|_Alignof|_Atomic|_Bool|_Complex|_Generic|_Imaginary|_Noreturn|_Static_assert|_Thread_local|asm|typeof|inline|auto|break|case|char|const|continue|default|do|double|else|enum|extern|float|for|goto|if|int|long|register|return|short|signed|sizeof|static|struct|switch|typedef|union|unsigned|void|volatile|while)\\b/,\n    operator: />>=?|<<=?|->|([-+&|:])\\1|[?:~]|[-+*/%&|^!=<>]=?/,\n    number: /(?:\\b0x(?:[\\da-f]+\\.?[\\da-f]*|\\.[\\da-f]+)(?:p[+-]?\\d+)?|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:e[+-]?\\d+)?)[ful]*/i\n  });\n  Prism.languages.insertBefore('c', 'string', {\n    macro: {\n      // allow for multiline macro definitions\n      // spaces after the # character compile fine with gcc\n      pattern: /(^\\s*)#\\s*[a-z]+(?:[^\\r\\n\\\\]|\\\\(?:\\r\\n|[\\s\\S]))*/im,\n      lookbehind: true,\n      alias: 'property',\n      inside: {\n        // highlight the path of the include statement as a string\n        string: {\n          pattern: /(#\\s*include\\s*)(?:<.+?>|(\"|')(?:\\\\?.)+?\\2)/,\n          lookbehind: true\n        },\n        // highlight macro directives as keywords\n        directive: {\n          pattern: /(#\\s*)\\b(?:define|defined|elif|else|endif|error|ifdef|ifndef|if|import|include|line|pragma|undef|using)\\b/,\n          lookbehind: true,\n          alias: 'keyword'\n        }\n      }\n    },\n    // highlight predefined macros as constants\n    constant: /\\b(?:__FILE__|__LINE__|__DATE__|__TIME__|__TIMESTAMP__|__func__|EOF|NULL|SEEK_CUR|SEEK_END|SEEK_SET|stdin|stdout|stderr)\\b/\n  });\n  delete Prism.languages.c['boolean'];\n}"],"sourceRoot":""}