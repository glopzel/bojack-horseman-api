{"version":3,"sources":["../node_modules/refractor/lang/markup-templating.js","../node_modules/refractor/lang/soy.js"],"names":["markupTemplating","Prism","getPlaceholder","language","index","toUpperCase","Object","defineProperties","languages","buildPlaceholders","value","env","placeholderPattern","replaceFilter","tokenStack","code","replace","match","placeholder","i","length","indexOf","grammar","markup","tokenizePlaceholders","j","keys","walkTokens","tokens","token","content","k","t","s","before","substring","middle","Token","tokenize","after","replacement","push","apply","splice","concat","module","exports","displayName","aliases","refractorMarkupTemplating","__webpack_require__","soy","register","stringPattern","numberPattern","comment","pattern","lookbehind","greedy","command-arg","alias","inside","punctuation","parameter","keyword","delimiter","property","variable","string","number","function","boolean","operator","hooks","add","soyLitteralMode"],"mappings":"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","file":"static/js/react-syntax-highlighter_languages_refractor_soy.0b493a00.chunk.js","sourcesContent":["'use strict';\n\nmodule.exports = markupTemplating;\nmarkupTemplating.displayName = 'markupTemplating';\nmarkupTemplating.aliases = [];\nfunction markupTemplating(Prism) {\n  ;\n  (function (Prism) {\n    /**\n     * Returns the placeholder for the given language id and index.\n     *\n     * @param {string} language\n     * @param {string|number} index\n     * @returns {string}\n     */\n    function getPlaceholder(language, index) {\n      return '___' + language.toUpperCase() + index + '___';\n    }\n    Object.defineProperties(Prism.languages['markup-templating'] = {}, {\n      buildPlaceholders: {\n        /**\n         * Tokenize all inline templating expressions matching `placeholderPattern`.\n         *\n         * If `replaceFilter` is provided, only matches of `placeholderPattern` for which `replaceFilter` returns\n         * `true` will be replaced.\n         *\n         * @param {object} env The environment of the `before-tokenize` hook.\n         * @param {string} language The language id.\n         * @param {RegExp} placeholderPattern The matches of this pattern will be replaced by placeholders.\n         * @param {(match: string) => boolean} [replaceFilter]\n         */\n        value: function value(env, language, placeholderPattern, replaceFilter) {\n          if (env.language !== language) {\n            return;\n          }\n          var tokenStack = env.tokenStack = [];\n          env.code = env.code.replace(placeholderPattern, function (match) {\n            if (typeof replaceFilter === 'function' && !replaceFilter(match)) {\n              return match;\n            }\n            var i = tokenStack.length;\n            var placeholder; // Check for existing strings\n            while (env.code.indexOf(placeholder = getPlaceholder(language, i)) !== -1) {\n              ++i;\n            } // Create a sparse array\n            tokenStack[i] = match;\n            return placeholder;\n          }); // Switch the grammar to markup\n          env.grammar = Prism.languages.markup;\n        }\n      },\n      tokenizePlaceholders: {\n        /**\n         * Replace placeholders with proper tokens after tokenizing.\n         *\n         * @param {object} env The environment of the `after-tokenize` hook.\n         * @param {string} language The language id.\n         */\n        value: function value(env, language) {\n          if (env.language !== language || !env.tokenStack) {\n            return;\n          } // Switch the grammar back\n          env.grammar = Prism.languages[language];\n          var j = 0;\n          var keys = Object.keys(env.tokenStack);\n          function walkTokens(tokens) {\n            for (var i = 0; i < tokens.length; i++) {\n              // all placeholders are replaced already\n              if (j >= keys.length) {\n                break;\n              }\n              var token = tokens[i];\n              if (typeof token === 'string' || token.content && typeof token.content === 'string') {\n                var k = keys[j];\n                var t = env.tokenStack[k];\n                var s = typeof token === 'string' ? token : token.content;\n                var placeholder = getPlaceholder(language, k);\n                var index = s.indexOf(placeholder);\n                if (index > -1) {\n                  ++j;\n                  var before = s.substring(0, index);\n                  var middle = new Prism.Token(language, Prism.tokenize(t, env.grammar), 'language-' + language, t);\n                  var after = s.substring(index + placeholder.length);\n                  var replacement = [];\n                  if (before) {\n                    replacement.push.apply(replacement, walkTokens([before]));\n                  }\n                  replacement.push(middle);\n                  if (after) {\n                    replacement.push.apply(replacement, walkTokens([after]));\n                  }\n                  if (typeof token === 'string') {\n                    tokens.splice.apply(tokens, [i, 1].concat(replacement));\n                  } else {\n                    token.content = replacement;\n                  }\n                }\n              } else if (token.content\n              /* && typeof token.content !== 'string' */) {\n                walkTokens(token.content);\n              }\n            }\n            return tokens;\n          }\n          walkTokens(env.tokens);\n        }\n      }\n    });\n  })(Prism);\n}","'use strict';\n\nvar refractorMarkupTemplating = require('./markup-templating.js');\nmodule.exports = soy;\nsoy.displayName = 'soy';\nsoy.aliases = [];\nfunction soy(Prism) {\n  Prism.register(refractorMarkupTemplating);\n  (function (Prism) {\n    var stringPattern = /([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/;\n    var numberPattern = /\\b\\d+(?:\\.\\d+)?(?:[eE][+-]?\\d+)?\\b|\\b0x[\\dA-F]+\\b/;\n    Prism.languages.soy = {\n      comment: [/\\/\\*[\\s\\S]*?\\*\\//, {\n        pattern: /(\\s)\\/\\/.*/,\n        lookbehind: true,\n        greedy: true\n      }],\n      'command-arg': {\n        pattern: /({+\\/?\\s*(?:alias|call|delcall|delpackage|deltemplate|namespace|template)\\s+)\\.?[\\w.]+/,\n        lookbehind: true,\n        alias: 'string',\n        inside: {\n          punctuation: /\\./\n        }\n      },\n      parameter: {\n        pattern: /({+\\/?\\s*@?param\\??\\s+)\\.?[\\w.]+/,\n        lookbehind: true,\n        alias: 'variable'\n      },\n      keyword: [{\n        pattern: /({+\\/?[^\\S\\r\\n]*)(?:\\\\[nrt]|alias|call|case|css|default|delcall|delpackage|deltemplate|else(?:if)?|fallbackmsg|for(?:each)?|if(?:empty)?|lb|let|literal|msg|namespace|nil|@?param\\??|rb|sp|switch|template|xid)/,\n        lookbehind: true\n      }, /\\b(?:any|as|attributes|bool|css|float|in|int|js|html|list|map|null|number|string|uri)\\b/],\n      delimiter: {\n        pattern: /^{+\\/?|\\/?}+$/,\n        alias: 'punctuation'\n      },\n      property: /\\w+(?==)/,\n      variable: {\n        pattern: /\\$[^\\W\\d]\\w*(?:\\??(?:\\.\\w+|\\[[^\\]]+]))*/,\n        inside: {\n          string: {\n            pattern: stringPattern,\n            greedy: true\n          },\n          number: numberPattern,\n          punctuation: /[\\[\\].?]/\n        }\n      },\n      string: {\n        pattern: stringPattern,\n        greedy: true\n      },\n      function: [/\\w+(?=\\()/, {\n        pattern: /(\\|[^\\S\\r\\n]*)\\w+/,\n        lookbehind: true\n      }],\n      boolean: /\\b(?:true|false)\\b/,\n      number: numberPattern,\n      operator: /\\?:?|<=?|>=?|==?|!=|[+*/%-]|\\b(?:and|not|or)\\b/,\n      punctuation: /[{}()\\[\\]|.,:]/\n    }; // Tokenize all inline Soy expressions\n    Prism.hooks.add('before-tokenize', function (env) {\n      var soyPattern = /{{.+?}}|{.+?}|\\s\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\//g;\n      var soyLitteralStart = '{literal}';\n      var soyLitteralEnd = '{/literal}';\n      var soyLitteralMode = false;\n      Prism.languages['markup-templating'].buildPlaceholders(env, 'soy', soyPattern, function (match) {\n        // Soy tags inside {literal} block are ignored\n        if (match === soyLitteralEnd) {\n          soyLitteralMode = false;\n        }\n        if (!soyLitteralMode) {\n          if (match === soyLitteralStart) {\n            soyLitteralMode = true;\n          }\n          return true;\n        }\n        return false;\n      });\n    }); // Re-insert the tokens after tokenizing\n    Prism.hooks.add('after-tokenize', function (env) {\n      Prism.languages['markup-templating'].tokenizePlaceholders(env, 'soy');\n    });\n  })(Prism);\n}"],"sourceRoot":""}