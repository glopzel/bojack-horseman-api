{"version":3,"sources":["../node_modules/refractor/lang/handlebars.js","../node_modules/refractor/lang/markup-templating.js"],"names":["refractorMarkupTemplating","__webpack_require__","handlebars","Prism","register","languages","comment","delimiter","pattern","alias","string","number","boolean","block","lookbehind","brackets","inside","punctuation","variable","hooks","add","env","buildPlaceholders","tokenizePlaceholders","module","exports","displayName","aliases","markupTemplating","getPlaceholder","language","index","toUpperCase","Object","defineProperties","value","placeholderPattern","replaceFilter","tokenStack","code","replace","match","placeholder","i","length","indexOf","grammar","markup","j","keys","walkTokens","tokens","token","content","k","t","s","before","substring","middle","Token","tokenize","after","replacement","push","apply","splice","concat"],"mappings":"8FAEA,IAAAA,EAAgCC,EAAQ,GAIxC,SAAAC,EAAAC,GACAA,EAAAC,SAAAJ,GACA,SAAAG,GACAA,EAAAE,UAAAH,WAAA,CACAI,QAAA,oBACAC,UAAA,CACAC,QAAA,qBACAC,MAAA,eAEAC,OAAA,mCACAC,OAAA,6DACAC,QAAA,qBACAC,MAAA,CACAL,QAAA,wCACAM,YAAA,EACAL,MAAA,WAEAM,SAAA,CACAP,QAAA,aACAQ,OAAA,CACAC,YAAA,QACAC,SAAA,YAGAD,YAAA,oCACAC,SAAA,yCAEAf,EAAAgB,MAAAC,IAAA,2BAAAC,GAEAlB,EAAAE,UAAA,qBAAAiB,kBAAAD,EAAA,aADA,4CAGAlB,EAAAgB,MAAAC,IAAA,0BAAAC,GACAlB,EAAAE,UAAA,qBAAAkB,qBAAAF,EAAA,gBA9BA,CAgCGlB,GArCHqB,EAAAC,QAAAvB,EACAA,EAAAwB,YAAA,aACAxB,EAAAyB,QAAA,mCCAA,SAAAC,EAAAzB,IAEA,SAAAA,GAQA,SAAA0B,EAAAC,EAAAC,GACA,YAAAD,EAAAE,cAAAD,EAAA,MAEAE,OAAAC,iBAAA/B,EAAAE,UAAA,wBAAqE,CACrEiB,kBAAA,CAYAa,MAAA,SAAAd,EAAAS,EAAAM,EAAAC,GACA,GAAAhB,EAAAS,aAAA,CAGA,IAAAQ,EAAAjB,EAAAiB,WAAA,GACAjB,EAAAkB,KAAAlB,EAAAkB,KAAAC,QAAAJ,EAAA,SAAAK,GACA,uBAAAJ,MAAAI,GACA,OAAAA,EAIA,IAFA,IACAC,EADAC,EAAAL,EAAAM,QAEA,IAAAvB,EAAAkB,KAAAM,QAAAH,EAAAb,EAAAC,EAAAa,OACAA,EAGA,OADAL,EAAAK,GAAAF,EACAC,IAEArB,EAAAyB,QAAA3C,EAAAE,UAAA0C,UAGAxB,qBAAA,CAOAY,MAAA,SAAAd,EAAAS,GACA,GAAAT,EAAAS,cAAAT,EAAAiB,WAAA,CAGAjB,EAAAyB,QAAA3C,EAAAE,UAAAyB,GACA,IAAAkB,EAAA,EACAC,EAAAhB,OAAAgB,KAAA5B,EAAAiB,aACA,SAAAY,EAAAC,GACA,QAAAR,EAAA,EAA2BA,EAAAQ,EAAAP,UAE3BI,GAAAC,EAAAL,QAF8CD,IAAA,CAK9C,IAAAS,EAAAD,EAAAR,GACA,qBAAAS,KAAAC,SAAA,kBAAAD,EAAAC,QAAA,CACA,IAAAC,EAAAL,EAAAD,GACAO,EAAAlC,EAAAiB,WAAAgB,GACAE,EAAA,kBAAAJ,MAAAC,QACAX,EAAAb,EAAAC,EAAAwB,GACAvB,EAAAyB,EAAAX,QAAAH,GACA,GAAAX,GAAA,KACAiB,EACA,IAAAS,EAAAD,EAAAE,UAAA,EAAA3B,GACA4B,EAAA,IAAAxD,EAAAyD,MAAA9B,EAAA3B,EAAA0D,SAAAN,EAAAlC,EAAAyB,SAAA,YAAAhB,EAAAyB,GACAO,EAAAN,EAAAE,UAAA3B,EAAAW,EAAAE,QACAmB,EAAA,GACAN,GACAM,EAAAC,KAAAC,MAAAF,EAAAb,EAAA,CAAAO,KAEAM,EAAAC,KAAAL,GACAG,GACAC,EAAAC,KAAAC,MAAAF,EAAAb,EAAA,CAAAY,KAEA,kBAAAV,EACAD,EAAAe,OAAAD,MAAAd,EAAA,CAAAR,EAAA,GAAAwB,OAAAJ,IAEAX,EAAAC,QAAAU,QAGeX,EAAAC,SAEfH,EAAAE,EAAAC,SAGA,OAAAF,EAEAD,CAAA7B,EAAA8B,aAjGA,CAqGGhD,GA1GHqB,EAAAC,QAAAG,EACAA,EAAAF,YAAA,mBACAE,EAAAD,QAAA","file":"static/js/react-syntax-highlighter_languages_refractor_handlebars.2b69d2ed.chunk.js","sourcesContent":["'use strict';\n\nvar refractorMarkupTemplating = require('./markup-templating.js');\nmodule.exports = handlebars;\nhandlebars.displayName = 'handlebars';\nhandlebars.aliases = [];\nfunction handlebars(Prism) {\n  Prism.register(refractorMarkupTemplating);\n  (function (Prism) {\n    Prism.languages.handlebars = {\n      comment: /\\{\\{![\\s\\S]*?\\}\\}/,\n      delimiter: {\n        pattern: /^\\{\\{\\{?|\\}\\}\\}?$/i,\n        alias: 'punctuation'\n      },\n      string: /([\"'])(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n      number: /\\b0x[\\dA-Fa-f]+\\b|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:[Ee][+-]?\\d+)?/,\n      boolean: /\\b(?:true|false)\\b/,\n      block: {\n        pattern: /^(\\s*~?\\s*)[#\\/]\\S+?(?=\\s*~?\\s*$|\\s)/i,\n        lookbehind: true,\n        alias: 'keyword'\n      },\n      brackets: {\n        pattern: /\\[[^\\]]+\\]/,\n        inside: {\n          punctuation: /\\[|\\]/,\n          variable: /[\\s\\S]+/\n        }\n      },\n      punctuation: /[!\"#%&'()*+,.\\/;<=>@\\[\\\\\\]^`{|}~]/,\n      variable: /[^!\"#%&'()*+,.\\/;<=>@\\[\\\\\\]^`{|}~\\s]+/\n    };\n    Prism.hooks.add('before-tokenize', function (env) {\n      var handlebarsPattern = /\\{\\{\\{[\\s\\S]+?\\}\\}\\}|\\{\\{[\\s\\S]+?\\}\\}/g;\n      Prism.languages['markup-templating'].buildPlaceholders(env, 'handlebars', handlebarsPattern);\n    });\n    Prism.hooks.add('after-tokenize', function (env) {\n      Prism.languages['markup-templating'].tokenizePlaceholders(env, 'handlebars');\n    });\n  })(Prism);\n}","'use strict';\n\nmodule.exports = markupTemplating;\nmarkupTemplating.displayName = 'markupTemplating';\nmarkupTemplating.aliases = [];\nfunction markupTemplating(Prism) {\n  ;\n  (function (Prism) {\n    /**\n     * Returns the placeholder for the given language id and index.\n     *\n     * @param {string} language\n     * @param {string|number} index\n     * @returns {string}\n     */\n    function getPlaceholder(language, index) {\n      return '___' + language.toUpperCase() + index + '___';\n    }\n    Object.defineProperties(Prism.languages['markup-templating'] = {}, {\n      buildPlaceholders: {\n        /**\n         * Tokenize all inline templating expressions matching `placeholderPattern`.\n         *\n         * If `replaceFilter` is provided, only matches of `placeholderPattern` for which `replaceFilter` returns\n         * `true` will be replaced.\n         *\n         * @param {object} env The environment of the `before-tokenize` hook.\n         * @param {string} language The language id.\n         * @param {RegExp} placeholderPattern The matches of this pattern will be replaced by placeholders.\n         * @param {(match: string) => boolean} [replaceFilter]\n         */\n        value: function value(env, language, placeholderPattern, replaceFilter) {\n          if (env.language !== language) {\n            return;\n          }\n          var tokenStack = env.tokenStack = [];\n          env.code = env.code.replace(placeholderPattern, function (match) {\n            if (typeof replaceFilter === 'function' && !replaceFilter(match)) {\n              return match;\n            }\n            var i = tokenStack.length;\n            var placeholder; // Check for existing strings\n            while (env.code.indexOf(placeholder = getPlaceholder(language, i)) !== -1) {\n              ++i;\n            } // Create a sparse array\n            tokenStack[i] = match;\n            return placeholder;\n          }); // Switch the grammar to markup\n          env.grammar = Prism.languages.markup;\n        }\n      },\n      tokenizePlaceholders: {\n        /**\n         * Replace placeholders with proper tokens after tokenizing.\n         *\n         * @param {object} env The environment of the `after-tokenize` hook.\n         * @param {string} language The language id.\n         */\n        value: function value(env, language) {\n          if (env.language !== language || !env.tokenStack) {\n            return;\n          } // Switch the grammar back\n          env.grammar = Prism.languages[language];\n          var j = 0;\n          var keys = Object.keys(env.tokenStack);\n          function walkTokens(tokens) {\n            for (var i = 0; i < tokens.length; i++) {\n              // all placeholders are replaced already\n              if (j >= keys.length) {\n                break;\n              }\n              var token = tokens[i];\n              if (typeof token === 'string' || token.content && typeof token.content === 'string') {\n                var k = keys[j];\n                var t = env.tokenStack[k];\n                var s = typeof token === 'string' ? token : token.content;\n                var placeholder = getPlaceholder(language, k);\n                var index = s.indexOf(placeholder);\n                if (index > -1) {\n                  ++j;\n                  var before = s.substring(0, index);\n                  var middle = new Prism.Token(language, Prism.tokenize(t, env.grammar), 'language-' + language, t);\n                  var after = s.substring(index + placeholder.length);\n                  var replacement = [];\n                  if (before) {\n                    replacement.push.apply(replacement, walkTokens([before]));\n                  }\n                  replacement.push(middle);\n                  if (after) {\n                    replacement.push.apply(replacement, walkTokens([after]));\n                  }\n                  if (typeof token === 'string') {\n                    tokens.splice.apply(tokens, [i, 1].concat(replacement));\n                  } else {\n                    token.content = replacement;\n                  }\n                }\n              } else if (token.content\n              /* && typeof token.content !== 'string' */) {\n                walkTokens(token.content);\n              }\n            }\n            return tokens;\n          }\n          walkTokens(env.tokens);\n        }\n      }\n    });\n  })(Prism);\n}"],"sourceRoot":""}